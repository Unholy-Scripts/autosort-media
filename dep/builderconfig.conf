################################################################################
#                                                                              #
# Title          : builderconfig.conf                                          #
#                                                                              #
# Description    : This file defines functions and other information           #
#                  for the build script to operate properly.                   #
#                                                                              #
# Author         : IOnine                                                      #
#                                                                              #
# Contact        : rbleattler@gmail.com (Please use Subject: Autodl Script)    #
#                                                                              #
# Date           : 05/29/2015                                                  #
#                                                                              #
# Version        : 1.2.0-beta                                                  #
#                                                                              #
# Usage          : N/A                                                         #
#                                                                              #
# Notes          :                                                             #
#                                                                              #
# Bash Version   : Tested on version 3.2.57(1)-release (x86_64-apple-darwin14) #
#                  and 4.2.25(1)-release (x86_64-pc-linux-gnu)                 #
#                                                                              #
################################################################################

variabledoc="./dep/variables.conf"
funcdoc="./dep/functions.conf"

########################################################################
#                           @__@__@__@__@                              #
#  This section creates functions vital to the proper functioning of   #
#                            the script.                               #
#                                                                      #
########################################################################


function welcome(){

    printf "Welcome to the autosort-media script builder!\n\n"
    printf "The purpose of this script is to locate files and directories\n"
    printf "based on parameters defined by YOU, and sort them into new \n"
    printf "directories, categorically based on those parameters. \n\n"
    printf "For the sake of simplicity, we'll call this filtering. \n"
    printf "The script also contains the functions necessary to configure \n"
    printf "an automatic transfer of files using 'tar' and 'scp'. \n"
    printf "By answering 'ACCEPT' to the following question you acknowledge \n"
    printf "that you are using this script at your own risk, and that \n"
    printf "you, and you alone are responsible for any changes made to \n"
    printf "your system, files, or any remote system and it's files. \n\n"
    sleep 5
    read -e -p "Do you accept these terms? (you must type ACCEPT to continue) [ACCEPT]" terms;
    terms=${terms:-ACCEPT}
    case $terms in 
        ACCEPT ) clear; continue;
        ;;
        * ) clear; echo "GOODBYE!"; exit; 
        ;;
    esac
}


########################################
#                                      #
#   This function creates an RSA key   #
#                                      #
########################################   


function sshkeygen(){

        <<expect_eof ./dep/sshkeygen.exp $HOME
expect_eof

    }

###########################################################
#                                                         #
#   This function sets permissions for the dependencies   #
#                                                         #
###########################################################

function setdepperm(){

sudo chmod +x ./dep/sshkeygen.exp
sudo chmod +x ./dep/sshest.exp
sudo chmod +x ./dep/microfunc.sh

}

###################################################################
#                                                                 #
#   This function obtains the user's username and sudo password.  #
#                                                                 #
###################################################################

function getuserinfo(){

        read -p "Enter your username: [$USER]" -e usrnm;
            usrnm=${usrnm:-$USER} 
        printf "Setting name to $usrnm...\n"

        while true;
            do
                read -e -p "Enter your sudo password: " -s supass; 
                    printf "\n"
                read -e -p "Enter your sudo password (again): " -s supassv;
                    printf "\n"
                    [ "$supass" = "$supassv" ] && break 
                    printf "Passwords Did Not Match...\n"
        done

    }

#######################################################################
#                                                                     #
#   This function establishes the ssh key pair with the remote host   #
#                                                                     #
#######################################################################

function sshestablish(){

        <<expect_eof ./dep/sshest.exp  "$addr" "$rempass" "$remusr" "$HOME" 
expect_eof

    }

###################################################################
#                                                                 #
#   This function what directories the user wants to manipulate.  #
#                                                                 #
###################################################################

function getdirinfo(){

    read -e -p "Enter the rtorrent directory for finished downloads: [$HOME/rtorrent/finished]" findir
        findir=${findir:-$HOME/rtorrent/finished};     ## defines the default value for this variable if no input detected ##
    printf "Setting directory to $findir...\n"

    read -e -p "Enter the directory where you want your organized media to go: [$HOME/Media]" meddir; 
        meddir=${meddir:-$HOME/Media}; 
    printf "Setting Media directory to $meddir...\n"

    }

############################################################################
#                                                                          #
#   This function determines if the user wants to enable remote transfer.  #
#                                                                          #
############################################################################

function remxfer(){

    read -e -p "Would you like to enable remote transfer of files?? (Yy|Nn)" yn;
        yn=${yn:-Yes};

            if [[ $yn = "Y"* || $yn = "y"* ]]
                then
                    RT="ON"
                    printf "Enabling Remote transfer of Files.\n"
                else
                    RT="OFF"
                    printf "Disabling Remote transfer of Files.\n"
            fi

    }

############################################################################
#                                                                          #
#   This function determines if the user wants to cleanup the media folder #
#                       after the remote transfer.                         #
#                                                                          #
############################################################################

function cleandirset(){
    
    read -e -p "Would you like to remove local files after remote transfer? (Yy|Nn)" rd;
        if [[ $rd = "Y"* || $rd = "y"* ]]
            then
                RD="ON"
                printf "Enabling Cleanup of Files After Transfer.\n"
            else
                RD="OFF"
                printf "Disabling Cleanup of Files After Transfer.\n"
        fi

    }

#########################################################################
#                                                                       #
#   This function sets the parameter matching algorithm for a filter.   #
#                                                                       #
#########################################################################

function match_par(){

echo "
for dir in \$(find /* \$findir/ -maxdepth 1 -type d );
    do
        if [[ \"\$dir\" = "$1" ]]  
            then
                printf \"\$(date)   : Moving \$dir to "$2". \n\" | tee -a \"\$logfile\"
                mv \$dir "$2"
        fi
    done
    "
    }

#########################################################################
#                                                                       #
#   This function sets the parameter ignoring algorithm for a filter.   #
#                                                                       #
#########################################################################

function ignore_par(){

echo "
    for dir in \$(find /* \$findir/ -maxdepth 1 -type d );
    do
        if [[ \"\$dir\" != "$1" ]]  
            then
                printf \"\$(date)   : Moving \$dir to "$2". \n\" | tee -a \"\$logfile\"
                mv \$dir "$2"
        fi
    done
    "
    }

#########################################################################
#                                                                       #
#    This function counts the lines in the argument provided to it.     #
#                                                                       #
#########################################################################

function linecount_p1(){

        Y=$(cat $1 | wc -l)
    (( X = $Y+1 ))
    
    }

#########################################################################
#                                                                       #
#     This function writes the head of the end script to the file.      #
#                                                                       #
#########################################################################

function writehead(){

printf "Creating Script File : $scriptfile\n"
        touch $scriptfile
cat "./dep/scripthead" > $scriptfile

}

#########################################################################
#                                                                       #
#  This function writes the variables for the end script to the file.   #
#                                                                       #
#########################################################################

function writevars(){


variablehere=$( head -24 $variabledoc )
cat < $variablehere >> $scriptfile

}

#########################################################################
#                                                                       #
#   This function writes the filters for the end script to the file.    #
#                                                                       #
#########################################################################

function writefilter(){

cat < $1 >> $scriptfile

}

#########################################################################
#                                                                       #
#  This function writes the functions for the end script to the file.   #
#                                                                       #
#########################################################################

function writefuncs(){

    cat >> $scriptfile <<EOFUNC
function sortdir$Q(){
EOFUNC
writefilter $1
cat >> $scriptfile <<EOFUNC
    }
EOFUNC

}

#########################################################################
#                                                                       #
#    This function determines a parameter based on the user's input.    #
#                                                                       #
#########################################################################

function paramdef(){

    linecount_p1 "$variabledoc";

    read -e -p "How many parameters would you like to configure for this folder? [2]" parnum;
        parnum=${parnum:-2};
            for (( i = 1; i <= "$param"; i++ ))
                    do
                        read -e -p "Should this parameter be matched or ignored? [Mm|Ii]" im;
                        im=${im:-Matched};
                            parvar="par$i"

                            read -e -p "Please define the parameter. (ex. *\"720p\"* will find all titles containing '720p'.)" param;
                                if [ $im = "M"* || $im = "m"* ]
                                    then
                                        par=${match_par $param $dirvar}
                                        writefuncs $par
                                    else
                                        par=${ignore_par $param $dirvar}
                                        writefuncs $par
                                fi

                        printf "Creating the parameter $parvar for $dirname...\n"
                            sed -i "${$X}i"$parvar"\=\"$param\"" $variabledoc
                    done
    }


############################################################################
#                                                                          #
#  This function determines if the user wants to create media folders for  #
#                       organization and sorting.                          #
#                                                                          #
############################################################################

function dirsetup(){
    
    linecount_p1 "$variabledoc";
    read -e -p "How many media directories would you like to configure? [4]" md;
        md=${md:-4};
                for (( i = 1; i <= "$md"; i++ ))
                    do
                        read -e -p "Provide a Name for this Directory: (Movies, Music, Kids, etc...)" dirname;
                            dirvar="dir$i"
                        printf "Creating the $dirname directory...\n"
                            sed -i "${$X}i"$dirvar"=\"$meddir/$dirname\"" $variabledoc
                        (( X++ ))
                            sed -i "${$X}i"filtnum"=\"$md\"" $variabledoc
                        paramdef
                    done 

            if (( $i >= $md ))
                then
                    /bin/bash ./dep/microfunc.sh
                    writevars
                then
                    yn="No"
            fi


    }

############################################################################
#                                                                          #
#    This function gives the user information and begins the process of    #
#                   creating directories and parameters.                   #
#                                                                          #
############################################################################

function configdirs(){

    printf "\n\n\n"
                            printf "Choosing yes to the following option will begin \n"
                            printf "configuration of directories to move media to after \n"
                            printf "sorting has completed. You should choose yes. \n"
                            printf "For parameters please follow this format: \n"
                            printf "If you want to move every folder/directory that \n"
                            printf "contains the string 720p in it's name then the \n"
                            printf "parameter should read *'720p'* . \n"
                            printf "If you are using Autotools' Automove feature to \n"
                            printf "automatically create subdirectories, then simply \n"
                            printf "defining 'Movies' (etc...) as your parameter should \n"
                            printf "effectively move everything within that directory. \n"
                            printf "\n\n\n"
                            sleep 4

                                read -e -p "Create Media Directories? [Yes]" yn3;
                                            yn3=${yn3:-Yes};
                                case $yn3 in 
                                    Y* | y* ) 
                                            dirsetup
                                    ;;
                                    N* | n* ) yn="No"; break;;
                                    * ) printf "Please Answer Yes or No!\n";;
                                esac

}

############################################################################
#                                                                          #
#   This function determines the remote login settings to connect to the   #
#      remote host. (Username, Password, IP Address, and Directories)      #
#                                                                          #
############################################################################

function remhostsettings(){

    while [[ "$yn" = "Y"* || "$yn" = "y"* || -z "$yn" ]] ; do
        yn2="Yes"
                case $yn2 in
                    Y* | y* ) 
                        read -e -p "Enter your username for the remote destination: [$USER]" remusr; 
                                remusr=${remusr:-$USER};     ## defines the default value for this variable if no input detected ##
                            printf "Setting remote username to $remusr...\n";
                        read -e -p "Enter your password for the remote destination:" -s rempass; 
                                rempass=${rempass:-$PASSWORD};     ## defines the default value for this variable if no input detected ##
                            printf "\nSetting remote password...\n";
                        read -e -p "Enter the IP Address of the remote location: [127.0.0.1]" addr;
                                addr=${addr:-127.0.0.1};     ## defines the default value for this variable if no input detected ##
                            printf "Setting remote IP Address to $addr...\n";
                        read -e -p "Enter the remote directory where you want to transfer your media to: [$addr/$HOME/Media]" rdest;
                                rdest=${rdest:-$addr/$HOME/Media};     ## defines the default value for this variable if no input detected ##
                            printf "Setting Media directory to $rdest...\n";
                    
                        if [ ! -f ~/.ssh ]
                            then
                                sudo mkdir ~/.ssh
                                if [ ! -O ~/.ssh ]
                                    then
                                        sudo chown -R -f $USER:$GROUPS ~/.ssh
                                fi
                        fi
                            sudo chmod 700 ~/.ssh  ## changes the permissions of the ~/.ssh folder for the owner

                        #######################################################################
                        ##                                                                   ##
                        ## This checks to see if the 'id_rsa' key exists. If the Key exists  ##
                        ## it will copy the key to the remote host. If it does not exist. It ##
                        ## will create a key, then copy the key to the remote host.          ##
                        ##                                                                   ##
                        #######################################################################

                        if [ ! -e ~/.ssh/id_rsa ]
                            then
                                sshkeygen &&
                                sshestablish wait $1
                            else
                                sshestablish wait $1
                        fi

                        ####################################
                        ##                                ##
                        ##  End of expect script section  ##
                        ##                                ##
                        ####################################
                ;;
                    N* | n* ) yn="No"; break;
                ;;
                    * ) printf "Please Answer Yes or No!\n"
                ;;
            esac
                            clear               ## Clears the Terminal Window.
    done

    }

############################################################################
#                                                                          #
#    This function determines where the user wants to save the log file.   #
#                                                                          #
############################################################################

function logset(){

    read -e -p "Enter the location for the log to be stored: [$HOME/logs]" tlogv1;
        tlogv1=${tlogv1:-$HOME/logs};
        logfile="$tlogv1/sortlog.txt"
    printf "Logs will be written to $logfile/sortlog.txt\n"

    }

#######################################################################################
#                                                                                     #
#    This function determines the location where the user wants to save the script.   #
#                                                                                     #
#######################################################################################

function scriptloc(){

    read -e -p "Enter the location for the script to be placed: [$HOME/scripts]" tscr1;
        tscr1=${tscr1:-$HOME/scripts};
        scriptfile="$tscr1/sortmedia.sh"

        if [ ! -e $tscr1 ]
            then
                printf "Creating Directory : $tscr1.\n"
                    mkdir $tscr1
                printf "The script will be written to $scriptfile.\n"
            else
                printf "Setting Directory to : $tscr1.\n"
                printf "The script will be written to $scriptfile.\n"
        fi

    }

#######################################################################################
#                                                                                     #
#         This function writes the tail of the end script to the script file.         #
#                                                                                     #
#######################################################################################

function writescriptend(){

    printf "Giving Script Execute Permissions, and Changing Ownership to $usrnm.\n"
        sudo chown $usrnm "$scriptfile"
        chmod +x "$scriptfile"

cat >> $scriptfile <<EOT

########################################################################
#                                                                      #
#                   This section runs the script.                      #
#                                                                      #
########################################################################

scriptmain

exit
EOT

    }

function depcheck(){

    if [ ! -e "/bin/expect" ]
        then
        read -e -p "Expect is not installed. Would you like to install it? (Yy|Nn)" xpi;
        xpi=${xpi:-Yes}
        case $xpi in
                Y* | y* ) sudo apt-get update; sudo apt-get install expect 
            ;;
                N* | n* ) break;
            ;;
                * ) printf "Please answer (Y)es or (N)o!";;
        esac 
}


### END CONFIG FILE ###